"""
Integraci√≥n principal para CaloriasAPI
Archivo para integrar los nuevos endpoints Stripe con tu aplicaci√≥n FastAPI existente
"""

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
import os
from dotenv import load_dotenv
import logging

# Importar los nuevos endpoints
from stripe_endpoints import router as stripe_router
from integration_helper import validate_supabase_token, log_api_usage

# Cargar variables de entorno
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ================== CONFIGURACI√ìN DE LA APP ==================

# Si ya tienes una app FastAPI, agregar estas l√≠neas:
# app = FastAPI(title="CaloriasAPI", version="1.0.0")

# Middleware CORS (si no lo tienes ya)
"""
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
"""

# ================== DEPENDENCIAS GLOBALES ==================

async def get_current_user_enhanced(request: Request):
    """
    Dependencia mejorada para obtener usuario actual con validaci√≥n Supabase
    """
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Token de autorizaci√≥n requerido")

    token = auth_header.replace("Bearer ", "")

    # Validar token con Supabase
    user_data = await validate_supabase_token(token)
    if not user_data:
        raise HTTPException(status_code=401, detail="Token inv√°lido o expirado")

    return user_data

# ================== MIDDLEWARE DE LOGGING ==================

async def log_request_middleware(request: Request, call_next):
    """
    Middleware para logging de requests
    """
    start_time = time.time()

    # Procesar request
    response = await call_next(request)

    # Log de la request
    duration = time.time() - start_time
    logger.info(f"{request.method} {request.url} - {response.status_code} - {duration:.2f}s")

    return response

# ================== ENDPOINTS DE SALUD MEJORADOS ==================

async def health_check_enhanced():
    """
    Health check mejorado con verificaci√≥n de servicios
    """
    try:
        # Verificar conexi√≥n a Stripe
        stripe_ok = bool(os.getenv("STRIPE_SECRET_KEY"))

        # Verificar conexi√≥n a Supabase
        supabase_ok = bool(os.getenv("SUPABASE_URL")) and bool(os.getenv("SUPABASE_SERVICE_ROLE_KEY"))

        # Verificar webhook secret
        webhook_ok = bool(os.getenv("STRIPE_WEBHOOK_SECRET"))

        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "services": {
                "stripe_configured": stripe_ok,
                "supabase_configured": supabase_ok,
                "webhook_configured": webhook_ok
            },
            "version": "1.1.0",
            "endpoints_available": [
                "/create-payment-intent",
                "/create-subscription",
                "/cancel-subscription",
                "/update-payment-method",
                "/stripe/webhooks"
            ]
        }

    except Exception as e:
        logger.error(f"‚ùå Error en health check: {e}")
        raise HTTPException(status_code=500, detail="Error en health check")

# ================== INTEGRACI√ìN DE ROUTERS ==================

# Agregar los nuevos endpoints Stripe a tu app existente:
"""
# En tu archivo main.py existente, agregar:
from stripe_endpoints import router as stripe_router

app.include_router(stripe_router, tags=["Stripe"])

# Actualizar el endpoint de health
@app.get("/health")
async def health():
    return await health_check_enhanced()
"""

# ================== CONFIGURACI√ìN DE VARIABLES ==================

def validate_environment():
    """
    Validar que todas las variables de entorno requeridas est√©n configuradas
    """
    required_vars = [
        "STRIPE_SECRET_KEY",
        "STRIPE_WEBHOOK_SECRET",
        "SUPABASE_URL",
        "SUPABASE_SERVICE_ROLE_KEY"
    ]

    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        logger.error(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        raise Exception(f"Variables de entorno requeridas: {missing_vars}")

    logger.info("‚úÖ Todas las variables de entorno est√°n configuradas")

# ================== INICIALIZACI√ìN ==================

def initialize_stripe_integration():
    """
    Inicializar integraci√≥n Stripe
    """
    try:
        # Validar entorno
        validate_environment()

        # Configurar Stripe
        import stripe
        stripe.api_key = os.getenv("STRIPE_SECRET_KEY")

        logger.info("‚úÖ Integraci√≥n Stripe inicializada correctamente")

    except Exception as e:
        logger.error(f"‚ùå Error inicializando Stripe: {e}")
        raise

# ================== C√ìDIGO DE EJEMPLO PARA INTEGRACI√ìN ==================

"""
# En tu archivo main.py principal, agregar al inicio:

from stripe_endpoints import router as stripe_router
from integration_helper import validate_supabase_token
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Inicializar Stripe
initialize_stripe_integration()

# Agregar router
app.include_router(stripe_router, tags=["Stripe Subscriptions"])

# Actualizar health check
@app.get("/health")
async def health():
    return await health_check_enhanced()

# Agregar middleware de logging si lo deseas
app.middleware("http")(log_request_middleware)
"""

# ================== TESTING ==================

async def test_stripe_integration():
    """
    Funci√≥n para probar la integraci√≥n Stripe
    """
    try:
        import stripe

        # Test b√°sico de conexi√≥n
        plans = stripe.Plan.list(limit=1)
        logger.info("‚úÖ Conexi√≥n a Stripe exitosa")

        return True

    except Exception as e:
        logger.error(f"‚ùå Error probando Stripe: {e}")
        return False

if __name__ == "__main__":
    # Para testing directo
    initialize_stripe_integration()
    logger.info("üöÄ Integraci√≥n Stripe lista para usar")