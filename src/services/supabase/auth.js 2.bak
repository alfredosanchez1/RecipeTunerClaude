import { supabase, TABLES, withErrorHandling } from './client';

/**
 * Servicio de autenticaci√≥n para RecipeTuner con Supabase
 * Maneja registro, login, logout y gesti√≥n de perfiles de usuario
 */

// ===== AUTENTICACI√ìN =====

/**
 * Registrar nuevo usuario
 */
export const signUp = async (email, password, userData = {}) => {
  try {
    console.log('üîê Registrando usuario:', email);

    // 1. Crear usuario en Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          app_name: 'recipetuner',
          name: userData.name || 'Usuario',
          ...userData
        }
      }
    });

    if (authError) {
      console.error('‚ùå Error en registro de auth:', authError);
      throw authError;
    }

    console.log('‚úÖ Usuario registrado en Auth:', authData.user?.id);

    // 2. Si el usuario se cre√≥ exitosamente, crear perfil en recipetuner_users
    if (authData.user) {
      await createUserProfile(authData.user, userData);
    }

    return {
      user: authData.user,
      session: authData.session,
      needsEmailConfirmation: !authData.session
    };
  } catch (error) {
    console.error('‚ùå Error en registro:', error);
    throw error;
  }
};

/**
 * Iniciar sesi√≥n
 */
export const signIn = async (email, password) => {
  try {
    console.log('üîê Iniciando sesi√≥n:', email);

    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      console.error('‚ùå Error en login:', error);
      throw error;
    }

    console.log('‚úÖ Usuario logueado:', data.user?.id);

    // Verificar/crear perfil si no existe
    if (data.user) {
      await ensureUserProfile(data.user);
    }

    return {
      user: data.user,
      session: data.session
    };
  } catch (error) {
    console.error('‚ùå Error en login:', error);
    throw error;
  }
};

/**
 * Cerrar sesi√≥n
 */
export const signOut = async () => {
  try {
    console.log('üîê Cerrando sesi√≥n...');

    const { error } = await supabase.auth.signOut();

    if (error) {
      console.error('‚ùå Error cerrando sesi√≥n:', error);
      throw error;
    }

    console.log('‚úÖ Sesi√≥n cerrada exitosamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error cerrando sesi√≥n:', error);
    throw error;
  }
};

/**
 * Obtener usuario actual
 */
export const getCurrentUser = async () => {
  try {
    const { data: { user }, error } = await supabase.auth.getUser();

    if (error) {
      console.error('‚ùå Error obteniendo usuario:', error);
      throw error;
    }

    return user;
  } catch (error) {
    console.error('‚ùå Error obteniendo usuario:', error);
    throw error;
  }
};

/**
 * Obtener sesi√≥n actual
 */
export const getCurrentSession = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();

    if (error) {
      console.error('‚ùå Error obteniendo sesi√≥n:', error);
      throw error;
    }

    return session;
  } catch (error) {
    console.error('‚ùå Error obteniendo sesi√≥n:', error);
    throw error;
  }
};

/**
 * Refrescar token de sesi√≥n
 */
export const refreshSession = async () => {
  try {
    const { data, error } = await supabase.auth.refreshSession();

    if (error) {
      console.error('‚ùå Error refrescando sesi√≥n:', error);
      throw error;
    }

    return data.session;
  } catch (error) {
    console.error('‚ùå Error refrescando sesi√≥n:', error);
    throw error;
  }
};

// ===== GESTI√ìN DE PERFILES =====

/**
 * Crear perfil de usuario en recipetuner_users
 */
export const createUserProfile = async (authUser, userData = {}) => {
  try {
    console.log('üë§ Creando perfil de usuario:', authUser.id);

    const profileData = {
      auth_user_id: authUser.id,
      name: userData.name || authUser.user_metadata?.name || 'Usuario',
      email: authUser.email,
      avatar: userData.avatar || authUser.user_metadata?.avatar_url || null,
      app_name: 'recipetuner'
    };

    const { data, error } = await supabase
      .from(TABLES.USERS)
      .insert([profileData])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error creando perfil:', error);
      throw error;
    }

    console.log('‚úÖ Perfil creado:', data.id);

    // Crear preferencias por defecto
    await createDefaultUserPreferences(data.id);

    return data;
  } catch (error) {
    console.error('‚ùå Error creando perfil:', error);
    throw error;
  }
};

/**
 * Verificar/crear perfil si no existe
 */
export const ensureUserProfile = async (authUser) => {
  try {
    console.log('üîç Verificando perfil de usuario:', authUser.id);

    // Buscar perfil existente
    const { data: existingProfile, error: selectError } = await supabase
      .from(TABLES.USERS)
      .select('*')
      .eq('auth_user_id', authUser.id)
      .single();

    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå Error buscando perfil:', selectError);
      throw selectError;
    }

    // Si existe, devolverlo
    if (existingProfile) {
      console.log('‚úÖ Perfil encontrado:', existingProfile.id);
      return existingProfile;
    }

    // Si no existe, crearlo
    console.log('üìù Perfil no encontrado, creando...');
    return await createUserProfile(authUser);
  } catch (error) {
    console.error('‚ùå Error verificando perfil:', error);
    throw error;
  }
};

/**
 * Obtener perfil de usuario
 */
export const getUserProfile = async (authUserId) => {
  try {
    console.log('üë§ Obteniendo perfil:', authUserId);

    const { data, error } = await supabase
      .from(TABLES.USERS)
      .select('*')
      .eq('auth_user_id', authUserId)
      .single();

    if (error) {
      console.error('‚ùå Error obteniendo perfil:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Error obteniendo perfil:', error);
    throw error;
  }
};

/**
 * Actualizar perfil de usuario
 */
export const updateUserProfile = async (authUserId, updates) => {
  try {
    console.log('‚úèÔ∏è Actualizando perfil:', authUserId);

    const { data, error } = await supabase
      .from(TABLES.USERS)
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('auth_user_id', authUserId)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error actualizando perfil:', error);
      throw error;
    }

    console.log('‚úÖ Perfil actualizado');
    return data;
  } catch (error) {
    console.error('‚ùå Error actualizando perfil:', error);
    throw error;
  }
};

// ===== PREFERENCIAS DE USUARIO =====

/**
 * Crear preferencias por defecto
 */
export const createDefaultUserPreferences = async (userId) => {
  try {
    console.log('‚öôÔ∏è Creando preferencias por defecto:', userId);

    const defaultPreferences = {
      user_id: userId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data, error } = await supabase
      .from(TABLES.USER_PREFERENCES)
      .insert([defaultPreferences])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error creando preferencias:', error);
      throw error;
    }

    console.log('‚úÖ Preferencias creadas');
    return data;
  } catch (error) {
    console.error('‚ùå Error creando preferencias:', error);
    throw error;
  }
};

/**
 * Obtener preferencias de usuario
 */
export const getUserPreferences = async (authUserId) => {
  try {
    console.log('‚öôÔ∏è Obteniendo preferencias:', authUserId);

    const { data, error } = await supabase
      .from(TABLES.USER_PREFERENCES)
      .select(`
        *,
        user:${TABLES.USERS}!inner(auth_user_id)
      `)
      .eq('user.auth_user_id', authUserId)
      .single();

    if (error) {
      console.error('‚ùå Error obteniendo preferencias:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Error obteniendo preferencias:', error);
    throw error;
  }
};

/**
 * Actualizar preferencias de usuario
 */
export const updateUserPreferences = async (authUserId, preferences) => {
  try {
    console.log('‚öôÔ∏è Actualizando preferencias:', authUserId);

    // Primero obtener el user_id
    const profile = await getUserProfile(authUserId);

    const { data, error } = await supabase
      .from(TABLES.USER_PREFERENCES)
      .update({
        ...preferences,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', profile.id)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error actualizando preferencias:', error);
      throw error;
    }

    console.log('‚úÖ Preferencias actualizadas');
    return data;
  } catch (error) {
    console.error('‚ùå Error actualizando preferencias:', error);
    throw error;
  }
};

// ===== LISTENERS DE AUTENTICACI√ìN =====

/**
 * Listener para cambios de autenticaci√≥n
 */
export const onAuthStateChange = (callback) => {
  return supabase.auth.onAuthStateChange((event, session) => {
    console.log('üîÑ Auth state changed:', event, session?.user?.id);
    callback(event, session);
  });
};

// ===== UTILIDADES =====

/**
 * Verificar si el usuario est√° autenticado
 */
export const isAuthenticated = async () => {
  try {
    const session = await getCurrentSession();
    return !!session?.user;
  } catch {
    return false;
  }
};

/**
 * Verificar si el email est√° confirmado
 */
export const isEmailConfirmed = async () => {
  try {
    const user = await getCurrentUser();
    return !!user?.email_confirmed_at;
  } catch {
    return false;
  }
};

/**
 * Reenviar email de confirmaci√≥n
 */
export const resendConfirmation = async (email) => {
  try {
    const { error } = await supabase.auth.resend({
      type: 'signup',
      email: email
    });

    if (error) {
      console.error('‚ùå Error reenviando confirmaci√≥n:', error);
      throw error;
    }

    console.log('‚úÖ Email de confirmaci√≥n reenviado');
    return true;
  } catch (error) {
    console.error('‚ùå Error reenviando confirmaci√≥n:', error);
    throw error;
  }
};

/**
 * Recuperar contrase√±a
 */
export const resetPassword = async (email) => {
  try {
    const { error } = await supabase.auth.resetPasswordForEmail(email);

    if (error) {
      console.error('‚ùå Error enviando reset de password:', error);
      throw error;
    }

    console.log('‚úÖ Email de reset enviado');
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando reset de password:', error);
    throw error;
  }
};

export default {
  signUp,
  signIn,
  signOut,
  getCurrentUser,
  getCurrentSession,
  refreshSession,
  getUserProfile,
  updateUserProfile,
  getUserPreferences,
  updateUserPreferences,
  onAuthStateChange,
  isAuthenticated,
  isEmailConfirmed,
  resendConfirmation,
  resetPassword
};