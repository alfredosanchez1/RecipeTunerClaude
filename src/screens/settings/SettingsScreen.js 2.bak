import React, { useState, useEffect } from 'react';
import { ScrollView, Alert, Text, View, Modal, StyleSheet } from 'react-native';
import { TextInput, Button, Switch, Card, Title, Paragraph } from 'react-native-paper';
import { useNavigation } from '@react-navigation/native';
import { useUser } from '../../context/UserContext';
import { useAuth } from '../../context/AuthContext';
import { SettingsSection, UserProfileHeader, AppInfoSection } from '../../components';
import { globalStyles } from '../../styles/globalStyles';
import { useRealmDatabase } from '../../hooks/useRealmDatabase';
import { supabase } from '../../services/supabase/client';

const SettingsScreen = () => {
  const navigation = useNavigation();
  const { user, setUser, resetUserData } = useUser();
  const { signOut } = useAuth();
  const { testDatabase, isInitialized } = useRealmDatabase();

  // Estados para modales
  const [changePasswordModal, setChangePasswordModal] = useState(false);
  const [exportDataModal, setExportDataModal] = useState(false);

  // Estados para formularios
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [notifications, setNotifications] = useState({
    mealReminders: true,
    healthAlerts: true,
    recipeUpdates: false
  });

  // Estados de carga
  const [loading, setLoading] = useState(false);

  // Función para probar Realm Database
  const handleTestDatabase = async () => {
    try {
      const result = await testDatabase();

      if (result.success) {
        const message = `Realm Database funciona perfectamente\n\nTests ejecutados:\n${result.tests.map(test => `- ${test}`).join('\n')}\n\nTimestamp: ${result.timestamp}`;
        Alert.alert('✅ Prueba Exitosa', message);
      } else {
        Alert.alert('❌ Error en Test', result.message);
      }
    } catch (error) {
      console.error('❌ Error en prueba de Realm Database:', error);
      Alert.alert('❌ Error', 'Error al probar Realm Database: ' + error.message);
    }
  };

  // Función alternativa para probar Realm Database
  const handleTestDatabaseAlt = async () => {
    try {
      const result = await testDatabase();

      if (result.success) {
        const message = `Realm Database funciona perfectamente\n\nTests ejecutados:\n- Inicialización\n- Crear objeto\n- Leer objeto\n- Eliminar objeto\n\nTimestamp: ${result.timestamp}`;
        Alert.alert('✅ Prueba Exitosa', message);
      } else {
        Alert.alert('❌ Error en Test', result.message);
      }
    } catch (error) {
      console.error('❌ Error en prueba de Realm Database:', error);
      Alert.alert('❌ Error', 'Error al probar Realm Database: ' + error.message);
    }
  };


  // Función para abrir modal de cambio de contraseña
  const handleChangePassword = () => {
    setPasswordForm({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
    setChangePasswordModal(true);
  };

  // Función para cambiar contraseña con sincronización completa en Supabase
  const handleSavePassword = async () => {
    // Validaciones de entrada
    if (!passwordForm.newPassword || !passwordForm.confirmPassword) {
      Alert.alert('Error', 'Por favor completa todos los campos');
      return;
    }

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      Alert.alert('Error', 'Las contraseñas no coinciden');
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      Alert.alert('Error', 'La contraseña debe tener al menos 6 caracteres');
      return;
    }

    // Validación de fortaleza de contraseña
    const hasNumber = /\d/.test(passwordForm.newPassword);
    const hasUpper = /[A-Z]/.test(passwordForm.newPassword);
    const hasLower = /[a-z]/.test(passwordForm.newPassword);

    if (!hasNumber || !hasUpper || !hasLower) {
      Alert.alert(
        'Contraseña débil',
        'La contraseña debe contener al menos:\n• Una letra mayúscula\n• Una letra minúscula\n• Un número',
        [
          { text: 'Continuar de todas formas', onPress: () => proceedWithPasswordChange() },
          { text: 'Cambiar contraseña', style: 'cancel' }
        ]
      );
      return;
    }

    await proceedWithPasswordChange();
  };

  const proceedWithPasswordChange = async () => {
    setLoading(true);
    try {
      console.log('🔐 SETTINGS - Iniciando cambio de contraseña en Supabase...');

      // Verificar que el usuario está autenticado
      const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();

      if (userError || !currentUser) {
        throw new Error('No se pudo verificar la sesión actual');
      }

      console.log('✅ SETTINGS - Usuario verificado, actualizando contraseña...');

      // Actualizar contraseña en Supabase Auth
      const { data, error } = await supabase.auth.updateUser({
        password: passwordForm.newPassword
      });

      if (error) {
        console.error('❌ SETTINGS - Error de Supabase:', error);
        throw error;
      }

      console.log('✅ SETTINGS - Contraseña actualizada exitosamente en Supabase');

      // Verificar que la sesión sigue activa después del cambio
      const { data: { user: updatedUser }, error: verifyError } = await supabase.auth.getUser();

      if (verifyError || !updatedUser) {
        console.warn('⚠️ SETTINGS - Sesión afectada por cambio de contraseña, pero cambio exitoso');
      } else {
        console.log('✅ SETTINGS - Sesión verificada post-cambio de contraseña');
      }

      // Limpiar formulario y cerrar modal
      setChangePasswordModal(false);
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });

      // Mostrar confirmación al usuario
      Alert.alert(
        '🔐 Contraseña Actualizada',
        'Tu contraseña ha sido cambiada exitosamente. La nueva contraseña está sincronizada con el servidor.',
        [
          {
            text: 'Entendido',
            onPress: () => {
              console.log('✅ SETTINGS - Cambio de contraseña completado exitosamente');
            }
          }
        ]
      );

    } catch (error) {
      console.error('❌ SETTINGS - Error cambiando contraseña:', error);

      let errorMessage = 'No se pudo cambiar la contraseña.';

      if (error.message.includes('Invalid login credentials')) {
        errorMessage = 'La contraseña actual es incorrecta.';
      } else if (error.message.includes('Password should be at least 6 characters')) {
        errorMessage = 'La contraseña debe tener al menos 6 caracteres.';
      } else if (error.message.includes('network')) {
        errorMessage = 'Error de conexión. Verifica tu internet y vuelve a intentar.';
      } else if (error.message) {
        errorMessage = error.message;
      }

      Alert.alert('Error al Cambiar Contraseña', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Función para exportar datos del usuario
  const handleExportData = () => {
    setExportDataModal(true);
  };

  // Función para realizar exportación de datos
  const handleConfirmExport = async () => {
    setLoading(true);
    try {
      // Obtener todas las recetas del usuario
      const { data: recipes, error: recipesError } = await supabase
        .from('recipetuner_recipes')
        .select(`
          *,
          nutrition_info:recipetuner_nutrition_info(*)
        `)
        .eq('app_name', 'recipetuner');

      if (recipesError) throw recipesError;

      // Obtener preferencias del usuario
      const { data: { user: authUser } } = await supabase.auth.getUser();
      const { data: preferences, error: prefsError } = await supabase
        .from('recipetuner_user_preferences')
        .select('*')
        .eq('user_id', authUser.id)
        .single();

      const exportData = {
        exportDate: new Date().toISOString(),
        user: {
          name: user?.name,
          email: user?.email
        },
        preferences: preferences,
        recipes: recipes,
        totalRecipes: recipes?.length || 0,
        adaptedRecipes: recipes?.filter(r => r.is_adapted).length || 0
      };

      // Crear JSON formateado
      const jsonString = JSON.stringify(exportData, null, 2);

      setExportDataModal(false);
      Alert.alert(
        'Datos Exportados',
        `Se exportaron ${recipes?.length || 0} recetas y tus preferencias. Los datos están listos para ser compartidos.`,
        [
          {
            text: 'Copiar al Portapapeles',
            onPress: async () => {
              try {
                // En React Native necesitarías usar @react-native-clipboard/clipboard
                // Por ahora solo mostramos el resultado
                console.log('Datos exportados:', jsonString);
                Alert.alert('Copiado', 'Datos copiados al portapapeles');
              } catch (error) {
                Alert.alert('Error', 'No se pudieron copiar los datos');
              }
            }
          },
          { text: 'OK' }
        ]
      );
    } catch (error) {
      console.error('Error exportando datos:', error);
      Alert.alert('Error', 'No se pudieron exportar los datos: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Función de logout
  const handleLogout = () => {
    Alert.alert(
      'Cerrar Sesión',
      '¿Estás seguro de que deseas cerrar sesión?',
      [
        { text: 'Cancelar', style: 'cancel' },
        { text: 'Cerrar Sesión', style: 'destructive', onPress: async () => {
          try {
            console.log('🔓 SETTINGS - Iniciando logout...');
            await signOut();
            await resetUserData();
            Alert.alert('Sesión Cerrada', 'Has cerrado sesión exitosamente');
          } catch (error) {
            console.error('❌ SETTINGS - Error en logout:', error);
            Alert.alert('Error', 'No se pudo cerrar sesión: ' + error.message);
          }
        }},
      ]
    );
  };


  const settingSections = [
    {
      title: 'Cuenta',
      items: [
        {
          label: 'Cambiar Contraseña',
          onPress: handleChangePassword,
          icon: 'lock'
        }
      ]
    },
    {
      title: 'Notificaciones',
      items: [
        {
          label: 'Recordatorios de Comidas',
          type: 'switch',
          value: notifications.mealReminders,
          onValueChange: (value) => setNotifications(prev => ({...prev, mealReminders: value})),
          icon: 'bell'
        },
        {
          label: 'Alertas de Salud',
          type: 'switch',
          value: notifications.healthAlerts,
          onValueChange: (value) => setNotifications(prev => ({...prev, healthAlerts: value})),
          icon: 'medical-bag'
        },
        {
          label: 'Actualizaciones de Recetas',
          type: 'switch',
          value: notifications.recipeUpdates,
          onValueChange: (value) => setNotifications(prev => ({...prev, recipeUpdates: value})),
          icon: 'refresh'
        }
      ]
    },
    {
      title: 'Datos',
      items: [
        {
          label: 'Exportar Mis Datos',
          onPress: handleExportData,
          icon: 'download'
        }
      ]
    },
    {
      title: 'Cuenta',
      items: [
        {
          label: '🔓 Cerrar Sesión',
          onPress: handleLogout,
          icon: 'logout'
        }
      ]
    },
    {
      title: 'Desarrollo',
      items: [
        {
          label: '🧪 Probar Realm Database',
          onPress: handleTestDatabase,
          icon: 'database'
        },
        {
          label: '🧪 Probar Realm Database (Alt)',
          onPress: handleTestDatabaseAlt,
          icon: 'database-outline'
        }
      ]
    }
  ];

  // Debug: Mostrar las secciones en consola
  useEffect(() => {
    console.log('🔍 SettingsScreen - Secciones disponibles:', settingSections.map(s => s.title));
    console.log('🔍 SettingsScreen - Sección Desarrollo:', settingSections.find(s => s.title === 'Desarrollo'));
  }, []);

  return (
    <>
      <ScrollView style={globalStyles.container}>
        <UserProfileHeader user={user} />

        {settingSections.map((section, index) => (
          <SettingsSection key={index} title={section.title} items={section.items} />
        ))}

        <AppInfoSection />
      </ScrollView>


      {/* Modal de Cambiar Contraseña */}
      <Modal
        visible={changePasswordModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <View style={styles.modalContainer}>
          <Card style={styles.modalCard}>
            <Card.Content>
              <Title style={styles.modalTitle}>🔐 Cambiar Contraseña</Title>

              <Paragraph style={styles.modalText}>
                Tu nueva contraseña se sincronizará automáticamente con el servidor de forma segura.
              </Paragraph>

              <TextInput
                label="Nueva Contraseña"
                value={passwordForm.newPassword}
                onChangeText={(text) => setPasswordForm(prev => ({...prev, newPassword: text}))}
                style={styles.input}
                mode="outlined"
                secureTextEntry
                right={<TextInput.Icon icon="eye" />}
                helper="Mínimo 6 caracteres. Recomendado: mayúsculas, minúsculas y números"
              />

              <TextInput
                label="Confirmar Nueva Contraseña"
                value={passwordForm.confirmPassword}
                onChangeText={(text) => setPasswordForm(prev => ({...prev, confirmPassword: text}))}
                style={styles.input}
                mode="outlined"
                secureTextEntry
                right={<TextInput.Icon icon="eye" />}
                error={passwordForm.confirmPassword && passwordForm.newPassword !== passwordForm.confirmPassword}
                helper={passwordForm.confirmPassword && passwordForm.newPassword !== passwordForm.confirmPassword ? "Las contraseñas no coinciden" : ""}
              />

              <View style={styles.passwordInfo}>
                <Text style={styles.infoTitle}>📋 Información importante:</Text>
                <Text style={styles.infoText}>• La contraseña se actualizará en Supabase inmediatamente</Text>
                <Text style={styles.infoText}>• Tu sesión permanecerá activa después del cambio</Text>
                <Text style={styles.infoText}>• Usa la nueva contraseña para futuros inicios de sesión</Text>
              </View>

              <View style={styles.modalButtons}>
                <Button
                  mode="outlined"
                  onPress={() => {
                    setChangePasswordModal(false);
                    setPasswordForm({
                      currentPassword: '',
                      newPassword: '',
                      confirmPassword: ''
                    });
                  }}
                  style={styles.modalButton}
                  disabled={loading}
                >
                  Cancelar
                </Button>
                <Button
                  mode="contained"
                  onPress={handleSavePassword}
                  style={styles.modalButton}
                  loading={loading}
                  disabled={loading || !passwordForm.newPassword || !passwordForm.confirmPassword}
                  icon="shield-check"
                >
                  {loading ? 'Actualizando...' : 'Cambiar Contraseña'}
                </Button>
              </View>
            </Card.Content>
          </Card>
        </View>
      </Modal>

      {/* Modal de Exportar Datos */}
      <Modal
        visible={exportDataModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <View style={styles.modalContainer}>
          <Card style={styles.modalCard}>
            <Card.Content>
              <Title style={styles.modalTitle}>Exportar Mis Datos</Title>

              <Paragraph style={styles.modalText}>
                Se exportarán todos tus datos incluyendo:
              </Paragraph>

              <View style={styles.exportList}>
                <Text style={styles.exportItem}>• Todas tus recetas</Text>
                <Text style={styles.exportItem}>• Recetas adaptadas con IA</Text>
                <Text style={styles.exportItem}>• Información nutricional</Text>
                <Text style={styles.exportItem}>• Preferencias dietéticas</Text>
                <Text style={styles.exportItem}>• Configuraciones de usuario</Text>
              </View>

              <Paragraph style={styles.modalWarning}>
                Los datos se exportarán en formato JSON. Puedes guardar este archivo como respaldo o para importar en otra cuenta.
              </Paragraph>

              <View style={styles.modalButtons}>
                <Button
                  mode="outlined"
                  onPress={() => setExportDataModal(false)}
                  style={styles.modalButton}
                  disabled={loading}
                >
                  Cancelar
                </Button>
                <Button
                  mode="contained"
                  onPress={handleConfirmExport}
                  style={styles.modalButton}
                  loading={loading}
                  disabled={loading}
                  icon="download"
                >
                  Exportar
                </Button>
              </View>
            </Card.Content>
          </Card>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 20,
  },
  modalCard: {
    width: '100%',
    maxWidth: 400,
    backgroundColor: '#fff',
    borderRadius: 12,
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: '#333',
  },
  input: {
    marginBottom: 15,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
    gap: 15,
  },
  modalButton: {
    flex: 1,
  },
  modalText: {
    fontSize: 16,
    marginBottom: 15,
    color: '#555',
  },
  exportList: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 8,
    marginBottom: 15,
  },
  exportItem: {
    fontSize: 14,
    color: '#333',
    marginBottom: 8,
    paddingLeft: 10,
  },
  modalWarning: {
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
    textAlign: 'center',
    marginBottom: 15,
  },
  passwordInfo: {
    backgroundColor: '#e3f2fd',
    padding: 15,
    borderRadius: 8,
    marginBottom: 20,
    borderLeftWidth: 4,
    borderLeftColor: '#2196f3',
  },
  infoTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1565c0',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 13,
    color: '#1976d2',
    marginBottom: 4,
    paddingLeft: 10,
  },
});

export default SettingsScreen;