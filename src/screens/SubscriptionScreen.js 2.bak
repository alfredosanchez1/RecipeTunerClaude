import React, { useState, useEffect } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from 'react-native';
import {
  Card,
  Title,
  Paragraph,
  Button,
  Text,
  useTheme,
  Chip,
  Divider,
} from 'react-native-paper';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

import {
  getSubscriptionPlans,
  getUserSubscription,
  hasActiveSubscription,
  getTrialDaysRemaining
} from '../services/supabase/subscriptions-mock';
import { apiRequest, BACKEND_CONFIG } from '../config/backend';

const SubscriptionScreen = ({ navigation }) => {
  const theme = useTheme();
  const [loading, setLoading] = useState(true);
  const [plans, setPlans] = useState([]);
  const [currentSubscription, setCurrentSubscription] = useState(null);
  const [hasActive, setHasActive] = useState(false);
  const [trialDays, setTrialDays] = useState(null);

  useEffect(() => {
    loadSubscriptionData();
  }, []);

  const loadSubscriptionData = async () => {
    try {
      setLoading(true);

      // Cargar planes disponibles
      const plansData = await getSubscriptionPlans();
      setPlans(plansData);

      // Verificar suscripción actual
      const activeSubscription = await hasActiveSubscription();
      setHasActive(activeSubscription);

      if (activeSubscription) {
        const subscription = await getUserSubscription();
        setCurrentSubscription(subscription);
      }

      // Verificar días de trial
      const trialDaysRemaining = await getTrialDaysRemaining();
      setTrialDays(trialDaysRemaining);

    } catch (error) {
      console.error('❌ Error cargando datos de suscripción:', error);
      Alert.alert('Error', 'No se pudieron cargar los planes de suscripción');
    } finally {
      setLoading(false);
    }
  };

  const handleSubscribe = async (plan) => {
    try {
      Alert.alert(
        'Confirmar Suscripción',
        `¿Deseas suscribirte al plan ${plan.name} por $${plan.price_monthly}/mes?`,
        [
          { text: 'Cancelar', style: 'cancel' },
          {
            text: 'Suscribirse',
            onPress: () => createPaymentIntent(plan)
          }
        ]
      );
    } catch (error) {
      console.error('❌ Error al suscribirse:', error);
      Alert.alert('Error', 'No se pudo procesar la suscripción');
    }
  };

  const createPaymentIntent = async (plan) => {
    try {
      setLoading(true);

      // Llamar a la API para crear el payment intent
      const response = await apiRequest(BACKEND_CONFIG.STRIPE_ENDPOINTS.CREATE_PAYMENT_INTENT, {
        method: 'POST',
        auth: true,
        body: JSON.stringify({
          plan_id: plan.id,
          price_id: plan.stripe_price_id,
          amount: plan.price_monthly * 100, // Convertir a centavos
          currency: 'usd'
        })
      });

      if (response.client_secret) {
        // Aquí integrarías con Stripe SDK para procesar el pago
        Alert.alert(
          'Payment Intent Creado',
          'Se ha creado el payment intent. En una implementación completa, aquí se abriría la interfaz de pago de Stripe.'
        );

        // Recargar datos después del pago
        await loadSubscriptionData();
      }

    } catch (error) {
      console.error('❌ Error creando payment intent:', error);
      Alert.alert('Error', 'No se pudo procesar el pago');
    } finally {
      setLoading(false);
    }
  };

  const handleCancelSubscription = () => {
    Alert.alert(
      'Cancelar Suscripción',
      '¿Estás seguro de que deseas cancelar tu suscripción? Mantendrás el acceso hasta el final del período actual.',
      [
        { text: 'No cancelar', style: 'cancel' },
        { text: 'Cancelar suscripción', style: 'destructive', onPress: cancelSubscription }
      ]
    );
  };

  const cancelSubscription = async () => {
    try {
      setLoading(true);

      // Llamar a la API para cancelar
      await apiRequest(BACKEND_CONFIG.STRIPE_ENDPOINTS.CANCEL_SUBSCRIPTION, {
        method: 'POST',
        auth: true,
        body: JSON.stringify({
          subscription_id: currentSubscription.stripe_subscription_id
        })
      });

      Alert.alert('Suscripción Cancelada', 'Tu suscripción ha sido cancelada correctamente');
      await loadSubscriptionData();

    } catch (error) {
      console.error('❌ Error cancelando suscripción:', error);
      Alert.alert('Error', 'No se pudo cancelar la suscripción');
    } finally {
      setLoading(false);
    }
  };

  const getPlanIcon = (planName) => {
    switch (planName.toLowerCase()) {
      case 'basico':
      case 'basic':
        return 'food-fork-drink';
      case 'premium':
        return 'crown';
      case 'pro':
        return 'diamond-stone';
      default:
        return 'chef-hat';
    }
  };

  const getPlanColor = (planName) => {
    switch (planName.toLowerCase()) {
      case 'basico':
      case 'basic':
        return '#4CAF50';
      case 'premium':
        return '#FF9800';
      case 'pro':
        return '#9C27B0';
      default:
        return theme.colors.primary;
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={styles.loadingText}>Cargando planes...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      {/* Header */}
      <View style={styles.header}>
        <Icon name="crown" size={50} color={theme.colors.primary} />
        <Title style={styles.headerTitle}>Planes de Suscripción</Title>
        <Paragraph style={styles.headerSubtitle}>
          Elige el plan perfecto para tus necesidades culinarias
        </Paragraph>
      </View>

      {/* Current Subscription Status */}
      {hasActive && currentSubscription && (
        <Card style={styles.currentSubscriptionCard}>
          <Card.Content>
            <View style={styles.currentSubscriptionHeader}>
              <Icon name="check-circle" size={24} color="#4CAF50" />
              <Title style={styles.currentSubscriptionTitle}>Suscripción Activa</Title>
            </View>
            <Text style={styles.currentPlanName}>{currentSubscription.plan?.name}</Text>
            <Text style={styles.currentPlanPrice}>
              ${currentSubscription.plan?.price_monthly}/mes
            </Text>

            {currentSubscription.status === 'trialing' && trialDays !== null && (
              <Chip
                icon="clock"
                style={styles.trialChip}
                textStyle={styles.trialChipText}
              >
                {trialDays} días de prueba restantes
              </Chip>
            )}

            <View style={styles.subscriptionActions}>
              <Button
                mode="outlined"
                onPress={handleCancelSubscription}
                icon="cancel"
                style={styles.cancelButton}
                textColor="#F44336"
              >
                Cancelar Suscripción
              </Button>
            </View>
          </Card.Content>
        </Card>
      )}

      {/* Trial Banner */}
      {!hasActive && (
        <Card style={styles.trialBanner}>
          <Card.Content>
            <View style={styles.trialBannerContent}>
              <Icon name="gift" size={30} color="#FF9800" />
              <View style={styles.trialBannerText}>
                <Title style={styles.trialBannerTitle}>¡Prueba Gratuita!</Title>
                <Paragraph style={styles.trialBannerSubtitle}>
                  7 días gratis en cualquier plan premium
                </Paragraph>
              </View>
            </View>
          </Card.Content>
        </Card>
      )}

      {/* Plans Grid */}
      <View style={styles.plansContainer}>
        {plans.map((plan) => (
          <Card key={plan.id} style={styles.planCard}>
            <Card.Content>
              <View style={styles.planHeader}>
                <Icon
                  name={getPlanIcon(plan.name)}
                  size={40}
                  color={getPlanColor(plan.name)}
                />
                <Title style={styles.planName}>{plan.name}</Title>
                {plan.is_popular && (
                  <Chip
                    icon="star"
                    style={styles.popularChip}
                    textStyle={styles.popularChipText}
                  >
                    Más Popular
                  </Chip>
                )}
              </View>

              <View style={styles.planPricing}>
                <Text style={styles.planPrice}>${plan.price_monthly}</Text>
                <Text style={styles.planPeriod}>/mes</Text>
              </View>

              <Paragraph style={styles.planDescription}>
                {plan.description}
              </Paragraph>

              <View style={styles.planFeatures}>
                <Text style={styles.featuresTitle}>Características:</Text>
                {plan.features?.map((feature, index) => (
                  <View key={index} style={styles.featureItem}>
                    <Icon name="check" size={16} color="#4CAF50" />
                    <Text style={styles.featureText}>{feature}</Text>
                  </View>
                ))}

                {/* Features por defecto si no hay en la base de datos */}
                {!plan.features && (
                  <>
                    <View style={styles.featureItem}>
                      <Icon name="check" size={16} color="#4CAF50" />
                      <Text style={styles.featureText}>
                        {plan.recipe_limit === -1 ? 'Recetas ilimitadas' : `${plan.recipe_limit} recetas/mes`}
                      </Text>
                    </View>
                    <View style={styles.featureItem}>
                      <Icon name="check" size={16} color="#4CAF50" />
                      <Text style={styles.featureText}>Adaptaciones con IA</Text>
                    </View>
                    <View style={styles.featureItem}>
                      <Icon name="check" size={16} color="#4CAF50" />
                      <Text style={styles.featureText}>Soporte prioritario</Text>
                    </View>
                  </>
                )}
              </View>

              <Divider style={styles.planDivider} />

              <Button
                mode={plan.is_popular ? "contained" : "outlined"}
                onPress={() => handleSubscribe(plan)}
                style={[
                  styles.subscribeButton,
                  plan.is_popular && styles.popularSubscribeButton
                ]}
                disabled={hasActive && currentSubscription?.plan?.id === plan.id}
              >
                {hasActive && currentSubscription?.plan?.id === plan.id
                  ? 'Plan Actual'
                  : 'Suscribirse'
                }
              </Button>
            </Card.Content>
          </Card>
        ))}
      </View>

      {/* Footer Info */}
      <Card style={styles.footerCard}>
        <Card.Content>
          <Title style={styles.footerTitle}>Información Importante</Title>

          <View style={styles.footerItem}>
            <Icon name="shield-check" size={20} color="#4CAF50" />
            <Text style={styles.footerText}>
              Pago seguro procesado por Stripe
            </Text>
          </View>

          <View style={styles.footerItem}>
            <Icon name="autorenew" size={20} color="#2196F3" />
            <Text style={styles.footerText}>
              Cancela en cualquier momento
            </Text>
          </View>

          <View style={styles.footerItem}>
            <Icon name="gift" size={20} color="#FF9800" />
            <Text style={styles.footerText}>
              7 días de prueba gratuita
            </Text>
          </View>

          <View style={styles.footerItem}>
            <Icon name="headset" size={20} color="#9C27B0" />
            <Text style={styles.footerText}>
              Soporte 24/7 disponible
            </Text>
          </View>
        </Card.Content>
      </Card>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8FAFC',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#4B5563',
  },
  header: {
    alignItems: 'center',
    padding: 30,
    paddingBottom: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    marginTop: 15,
    marginBottom: 10,
    textAlign: 'center',
    color: '#1F2937',
  },
  headerSubtitle: {
    fontSize: 16,
    textAlign: 'center',
    color: '#4B5563',
    lineHeight: 24,
  },
  currentSubscriptionCard: {
    margin: 20,
    marginBottom: 15,
    elevation: 3,
    backgroundColor: '#F0FDF4',
    borderLeftWidth: 4,
    borderLeftColor: '#4CAF50',
  },
  currentSubscriptionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  currentSubscriptionTitle: {
    marginLeft: 10,
    fontSize: 18,
    color: '#1F2937',
  },
  currentPlanName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 5,
  },
  currentPlanPrice: {
    fontSize: 20,
    color: '#4CAF50',
    marginBottom: 15,
  },
  trialChip: {
    alignSelf: 'flex-start',
    backgroundColor: '#FFF3E0',
    marginBottom: 15,
  },
  trialChipText: {
    color: '#E65100',
  },
  subscriptionActions: {
    marginTop: 10,
  },
  cancelButton: {
    borderColor: '#F44336',
  },
  trialBanner: {
    margin: 20,
    marginBottom: 15,
    elevation: 2,
    backgroundColor: '#FFF8E1',
  },
  trialBannerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  trialBannerText: {
    marginLeft: 15,
    flex: 1,
  },
  trialBannerTitle: {
    fontSize: 18,
    color: '#E65100',
    marginBottom: 5,
  },
  trialBannerSubtitle: {
    color: '#EF6C00',
  },
  plansContainer: {
    padding: 20,
    paddingTop: 0,
  },
  planCard: {
    marginBottom: 20,
    elevation: 2,
  },
  planHeader: {
    alignItems: 'center',
    marginBottom: 20,
  },
  planName: {
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 10,
    marginBottom: 10,
    color: '#1F2937',
  },
  popularChip: {
    backgroundColor: '#E3F2FD',
  },
  popularChipText: {
    color: '#1976D2',
  },
  planPricing: {
    flexDirection: 'row',
    alignItems: 'baseline',
    justifyContent: 'center',
    marginBottom: 15,
  },
  planPrice: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  planPeriod: {
    fontSize: 18,
    color: '#4B5563',
    marginLeft: 5,
  },
  planDescription: {
    textAlign: 'center',
    color: '#4B5563',
    marginBottom: 20,
    lineHeight: 22,
  },
  planFeatures: {
    marginBottom: 20,
  },
  featuresTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 10,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  featureText: {
    marginLeft: 10,
    fontSize: 14,
    color: '#4B5563',
    flex: 1,
  },
  planDivider: {
    marginBottom: 20,
  },
  subscribeButton: {
    borderRadius: 8,
  },
  popularSubscribeButton: {
    backgroundColor: '#1976D2',
  },
  footerCard: {
    margin: 20,
    marginTop: 0,
    elevation: 2,
  },
  footerTitle: {
    fontSize: 18,
    marginBottom: 15,
    color: '#1F2937',
    fontWeight: '600',
  },
  footerItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  footerText: {
    marginLeft: 15,
    fontSize: 14,
    color: '#4B5563',
    flex: 1,
  },
});

export default SubscriptionScreen;