#!/bin/bash

# üîç Pre-commit Hook - Verificaci√≥n de Archivos
# Se ejecuta autom√°ticamente antes de cada commit

echo "üîç Verificando archivos antes del commit..."

# Colores para output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Contador de errores
ERRORS=0

# 1. Verificar que node_modules NO est√© en staging
if git diff --cached --name-only | grep -q "^node_modules/"; then
    echo -e "${RED}‚ùå ERROR: node_modules/ est√° en staging${NC}"
    echo "   Ejecuta: git reset HEAD node_modules/"
    ERRORS=$((ERRORS + 1))
fi

# 2. Verificar carpetas de build de iOS
if git diff --cached --name-only | grep -qE "^ios/(build|Pods|DerivedData)/"; then
    echo -e "${RED}‚ùå ERROR: Archivos de build de iOS en staging${NC}"
    echo "   Ejecuta: git reset HEAD ios/build ios/Pods ios/DerivedData"
    ERRORS=$((ERRORS + 1))
fi

# 3. Verificar carpetas de build de Android
if git diff --cached --name-only | grep -qE "^android/(app/build|\.gradle|build)/"; then
    echo -e "${RED}‚ùå ERROR: Archivos de build de Android en staging${NC}"
    echo "   Ejecuta: git reset HEAD android/app/build android/.gradle android/build"
    ERRORS=$((ERRORS + 1))
fi

# 4. Verificar archivos .env (secrets)
if git diff --cached --name-only | grep -qE "\.env$|\.env\."; then
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Archivo .env detectado${NC}"
    echo "   ¬øEst√°s seguro de commitear variables de entorno?"
    echo "   Presiona Ctrl+C para cancelar, o Enter para continuar"
    read -r
fi

# 5. Verificar archivos grandes (> 5MB)
LARGE_FILES=$(git diff --cached --name-only | while read file; do
    if [ -f "$file" ]; then
        SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$SIZE" -gt 5242880 ]; then  # 5MB en bytes
            echo "$file ($(echo $SIZE | awk '{printf "%.2f MB", $1/1024/1024}'))"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Archivos grandes detectados:${NC}"
    echo "$LARGE_FILES"
    echo "   ¬øContinuar? (Ctrl+C para cancelar, Enter para continuar)"
    read -r
fi

# 6. Verificar archivos duplicados (con " 2" en el nombre)
if git diff --cached --name-only | grep -q " 2"; then
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Archivos duplicados detectados (contienen ' 2')${NC}"
    git diff --cached --name-only | grep " 2"
    echo "   Considera limpiarlos antes del commit"
fi

# 7. Verificar archivos .bak
if git diff --cached --name-only | grep -q "\.bak$"; then
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Archivos .bak (backup) detectados${NC}"
    git diff --cached --name-only | grep "\.bak$"
    echo "   Considera eliminarlos"
fi

# 8. Verificar .DS_Store (macOS)
if git diff --cached --name-only | grep -q "\.DS_Store"; then
    echo -e "${RED}‚ùå ERROR: .DS_Store en staging${NC}"
    echo "   Ejecuta: git reset HEAD .DS_Store && find . -name .DS_Store -delete"
    ERRORS=$((ERRORS + 1))
fi

# 9. Contar archivos en staging
STAGED_COUNT=$(git diff --cached --name-only | wc -l | tr -d ' ')
if [ "$STAGED_COUNT" -gt 100 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: $STAGED_COUNT archivos en staging${NC}"
    echo "   ¬øEs esto esperado? Muchos archivos pueden indicar un problema"
    echo "   Presiona Ctrl+C para cancelar, o Enter para continuar"
    read -r
fi

# 10. Verificar tama√±o del repo
REPO_SIZE=$(du -sh .git 2>/dev/null | cut -f1)
echo -e "${GREEN}‚ÑπÔ∏è  Tama√±o actual del repositorio: $REPO_SIZE${NC}"

# Resultado final
echo ""
if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Pre-commit fall√≥ con $ERRORS error(es)${NC}"
    echo "   Corrige los problemas y vuelve a intentar"
    exit 1
else
    echo -e "${GREEN}‚úÖ Verificaci√≥n completada - Commit permitido${NC}"
    exit 0
fi
